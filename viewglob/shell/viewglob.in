#! @BASH_FULL_PATH@
# Copyright (C) 2004, 2005 Stephen Bach
# This is script is a wrapper interface to the Viewglob package.
#
# Viewglob is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Viewglob is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Viewglob; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

SCRIPT_NAME="${0##*/}"
VG_LIB_DIR="@pkglibdir@"
VGPING="$VG_LIB_DIR/vgping"

# Execution configuration
VGSEER_ONLY=
VGSEER_OPTS=
VGSEER_EXEC=vgseer
VGD_OPTS=

# vgping needs a default.
HOST=localhost
PORT=16108

# We need extended globbing.
shopt -s extglob

vg_usage() {
	cat >&2 << EOF
usage: $SCRIPT_NAME [-h <host>] [-p <port>] [-c <shell mode>] [-d <display>]
                [-s <sort style>] [-r <dir ordering] [-t <on/off>]
                [-i <on/off>] [-z <font size modifier>]

-h, --host                  Host to connect to.            (default: localhost)
-p, --port                  Port to use or connect to.     (default: 16108)
-c, --shell-mode            Shell to use (bash or zsh).    (default: bash)
-d, --display               Display program.               (default: vgmini)
-s, --sort-style            Windows (dirs first) or ls.    (default: ls)
-r, --dir-order             Directory list ordering.       (default: ascending)

-t, --shell-star            Asterisk character at prompt.  (default: on)
-i, --file-icons            File type icons in display.    (default: on)

-z, --font-size-modifier    Increase/decrease display font size.

-h, --help                  This usage.
-V, --version               Print the version.
EOF

	exit 0
}

vg_error() {
	echo "$SCRIPT_NAME: $1" >&2
	exit $2
}

vg_version() {
cat << EOF
@PACKAGE_NAME@ @PACKAGE_VERSION@
Released @RELEASE_DATE@
EOF
	exit 0
}


# Option verification functions

vg_test_shell_mode() {
	if [ "$1" != bash ] && [ "$1" != zsh ]
		then vg_error "Shell mode must be \"bash\" or \"zsh\"" 1
	fi
}

vg_test_display() {
	if [ ! "$1" ]
		then vg_error "No display program specified" 1
	elif [ "$1" = vgmini ] || [ "$1" = vgclassic ]
		then vg_disp="$VG_LIB_DIR/$1"
	else
		vg_disp="$1"
	fi

	if [ ! -x "$vg_disp" ]
		then vg_error "$1 is not present or not executable" 1
	fi
}

vg_test_sort_style() {
	if [ "$1" != ls ] && [ "$1" != win ]
		then vg_error "Unknown sort style \"$1\"" 1
	fi
}

vg_test_dir_order() {
	if [ "$1" != descending ] && \
	   [ "$1" != ascending ] && \
	   [ "$1" != ascending-pwd-first ]
		then vg_error "Invalid directory ordering \"$1\"" 1
	fi
}

vg_test_font_size_modifier() {
	if [[ "$1" != ?([-+])*([0-9]) ]]
		then vg_error "Invalid font size modifier" 1
	fi
}

vg_test_onoff() {
	if [[ "$OPTARG" != on ]] && [[ "$OPTARG" != off ]]
		then vg_error "Argument must be \"on\" or \"off\"" 1
	fi
}


if [[ "$VG_VIEWGLOB_ACTIVE" = yep ]]
	then vg_error "This shell is already being monitored" 2
elif [[ -z "$DISPLAY" ]]
	then VGSEER_ONLY=yep
elif [[ -z "$TERM" ]] || [[ "$TERM" = dumb ]]
	# There's no terminal associated with the shell, but an X display is
	# present, so make a new xterm.
	then VGSEER_EXEC="xterm -e $VGSEER_EXEC"
fi

# This is an excellent script to replace bash's getopts with one which allows
# long names.  I found it on Google Groups.  It's written by Grigoriy Strokin
# (grg@philol.msu.ru).  The script is also available in the bash package under
# examples/functions/getoptx.bash.
. $VG_LIB_DIR/getopt.sh

# Parse the options.
while getoptex "h: p: i: c: d: r: s: t: H; v; V; z: host: port: shell-mode: display: font-size-modifier: sort-style: dir-order: shell-star: file-icons: help; version;" "$@"
	do case "$OPTOPT" in

		h|host)
			VGSEER_ONLY=yep
			HOST="$OPTARG"
			VGSEER_OPTS="$VGSEER_OPTS --host=$OPTARG"
			;;

		p|port)
			VGSEER_OPTS="$VGSEER_OPTS --port=$OPTARG"
			PORT="$OPTARG"
			VGD_OPTS="$VGD_OPTS --port=$OPTARG"
			;;

		i|file-icons)
			vg_test_onoff "$OPTARG"
			VGD_OPTS="$VGD_OPTS --file-icons $OPTARG"
			;;

		c|shell-mode)
			vg_test_shell_mode "$OPTARG"
			VGSEER_OPTS="$VGSEER_OPTS --shell-mode=$OPTARG"
			;;

		d|display)
			vg_test_display "$OPTARG"
			VGD_OPTS="$VGD_OPTS --display=$OPTARG"
			;;

		s|sort-style)
			[ "$OPTARG" == windows ] && OPTARG=win
			vg_test_sort_style "$OPTARG"
			VGD_OPTS="$VGD_OPTS --sort-style=$OPTARG"
			;;

		r|dir-order)
			vg_test_dir_order "$OPTARG"
			VGD_OPTS="$VGD_OPTS --dir-order=$OPTARG"
			;;

		t|shell-star)
			vg_test_onoff "$OPTARG"
			VGSEER_OPTS="$VGSEER_OPTS --shell-star $OPTARG"
			;;

		z|font-size-modifier)
			vg_test_font_size_modifier "$OPTARG"
			VGD_OPTS="$VGD_OPTS --font-size-modifier=$OPTARG"
			;;

		H|help) vg_usage ;;

		v|V|version) vg_version ;;

		*) vg_error "invalid argument" 3 ;;
	esac
done
shift $((OPTIND - 1))

if [ "$OPTOPT" = \? ]
	# getopt.sh already emitted an error message.
	then exit 5
fi

if [ "$VGSEER_ONLY" = yep ]; then
	# Either we're running in a display-less environment or the user
	# specified a host to connect to, implying we're not going local.

	if ! $VGPING $HOST $PORT ; then
		vg_error "Couldn't handshake with a vgd at ${HOST}:${PORT}" 6
	fi

	exec $VGSEER_EXEC $VGSEER_OPTS

else
	# First check for an existing vgd.  If there is one, connect to it.
	if $VGPING $HOST $PORT ; then
		exec $VGSEER_EXEC $VGSEER_OPTS
	fi

	# We'll have to setup a new vgd, then exec.
	if vgd $VGD_OPTS --daemon=on ; then
		exec $VGSEER_EXEC $VGSEER_OPTS
	fi
fi

