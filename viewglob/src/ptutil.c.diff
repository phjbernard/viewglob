--- ptutil.c	2004-08-05 02:35:59.000000000 -0400
+++ ptutil.c.viewglob	2004-08-06 17:57:37.000000000 -0400
@@ -18,8 +18,12 @@
 	are to be used.
 
 */
-#include "defs.h"
-#include "ptutil.h"
+
+#include "common.h"
+#include "ptutil.viewglob.h"
+#include <sys/stat.h>
+#include <fcntl.h>
+
 /*[NONPORTABILITY_SYMBOLS]*/
 #if defined(SOLARIS) /* add to this as necessary */
 #define NEED_STREAM_SETUP
@@ -67,7 +71,8 @@
 	ec_neg1( p->pt_fd_m = posix_openpt(O_RDWR | O_NOCTTY) )
 #else
 	strcpy(p->pt_name_m, "/dev/ptmx"); /* clone device */
-	ec_neg1( p->pt_fd_m = open(p->pt_name_m, O_RDWR) )
+	if ( (p->pt_fd_m = open(p->pt_name_m, O_RDWR)) == -1)
+		goto failure;
 #endif
 #elif defined(MASTER_NAME_SEARCH)
 	int i, j;
@@ -83,7 +88,7 @@
 		if (access(proto, F_OK) == -1) {
 			if (errno == ENOENT)
 				continue;
-			EC_FAIL
+			goto failure;
 		}
 		for (j = 0; j < sizeof(PTY_RANGE) - 1; j++) {
 			proto[PTY_Y] = PTY_RANGE[j];
@@ -101,17 +106,16 @@
 	}
 	if (p->pt_fd_m == -1) {
 		errno = EAGAIN;
-		EC_FAIL
+		goto failure;
 	}
 #else
 	errno = ENOSYS;
-	EC_FAIL
+	goto failure;
 #endif
 	return true;
 
-EC_CLEANUP_BGN
+failure:
 	return false;
-EC_CLEANUP_END
 }
 /*[pt_open_master]*/
 PTINFO *pt_open_master(void)
@@ -121,17 +125,22 @@
 	char *s;
 #endif
 
-	ec_null( p = calloc(1, sizeof(PTINFO)) )
+	if ( (p = calloc(1, sizeof(PTINFO))) == NULL )
+		goto failure;
 	p->pt_fd_m = -1;
 	p->pt_fd_s = -1;
-	ec_false( find_and_open_master(p) )
+	if (find_and_open_master(p) == false)
+		goto failure;
 #ifdef _XOPEN_UNIX
-	ec_neg1( grantpt(p->pt_fd_m) )
-	ec_neg1( unlockpt(p->pt_fd_m) )
-	ec_null( s = ptsname(p->pt_fd_m) )
+	if (grantpt(p->pt_fd_m) == -1 )
+		goto failure;
+	if (unlockpt(p->pt_fd_m) == -1)
+		goto failure;
+	if ( (s = ptsname(p->pt_fd_m)) == NULL )
+		goto failure;
 	if (strlen(s) >= PT_MAX_NAME) {
 		errno = ENAMETOOLONG;
-		EC_FAIL
+		goto failure;
 	}
 	strcpy(p->pt_name_s, s);
 #elif defined(MASTER_NAME_SEARCH)
@@ -139,18 +148,17 @@
 	p->pt_name_s[PTY_MS] = 't';
 #else
 	errno = ENOSYS;
-	EC_FAIL
+	goto failure;
 #endif
 	return p;
 
-EC_CLEANUP_BGN
+failure:
 	if (p != NULL) {
 		(void)close(p->pt_fd_m);
 		(void)close(p->pt_fd_s);
 		free(p);
 	}
 	return NULL;
-EC_CLEANUP_END
 }
 /*[]*/
 /*
@@ -160,28 +168,35 @@
 /*[pt_open_slave]*/
 bool pt_open_slave(PTINFO *p)
 {
-	ec_neg1( setsid() )
-	if (p->pt_fd_s != -1)
-		ec_neg1( close(p->pt_fd_s) )
-	ec_neg1( p->pt_fd_s = open(p->pt_name_s, O_RDWR) )
+	if(setsid() == -1)
+		goto failure;
+	if (p->pt_fd_s != -1) {
+		if (close(p->pt_fd_s) == -1)
+			goto failure;
+	}
+	if ( (p->pt_fd_s = open(p->pt_name_s, O_RDWR)) == -1 )
+		goto failure;
 #if defined(NEED_TIOCSCTTY)
-	ec_neg1( ioctl(p->pt_fd_s, TIOCSCTTY, 0) )
+	if (ioctl(p->pt_fd_s, TIOCSCTTY, 0) == -1)
+		goto failure;
 #endif
 #if defined(NEED_STREAM_SETUP)
-	ec_neg1( ioctl(p->pt_fd_s, I_PUSH, "ptem") )
-	ec_neg1( ioctl(p->pt_fd_s, I_PUSH, "ldterm") )
+	if (ioctl(p->pt_fd_s, I_PUSH, "ptem") == -1)
+		goto failure;
+	if (ioctl(p->pt_fd_s, I_PUSH, "ldterm") == -1)
+		goto failure;
 #endif
 	/*
 		Changing mode not that important, so don't fail if it doesn't
 		work only because we're not superuser.
 	*/
-	if (fchmod(p->pt_fd_s, PERM_FILE) == -1 && errno != EPERM)
-		EC_FAIL
+	if (fchmod(p->pt_fd_s, PERM_FILE) == -1 && errno != EPERM) {
+		goto failure;
+	}
 	return true;
 
-EC_CLEANUP_BGN
+failure:
 	return false;
-EC_CLEANUP_END
 }
 /*[pt_wait_master]*/
 bool pt_wait_master(PTINFO *p)
@@ -190,24 +205,23 @@
 
 	FD_ZERO(&fd_set_write);
 	FD_SET(PT_GET_MASTER_FD(p), &fd_set_write);
-	ec_neg1( select(PT_GET_MASTER_FD(p) + 1, NULL, &fd_set_write, NULL,
-	  NULL) )
+	if ( select(PT_GET_MASTER_FD(p) + 1, NULL, &fd_set_write, NULL, NULL) == -1 )
+		goto failure;
 	return true;
 
-EC_CLEANUP_BGN
+failure:
 	return false;
-EC_CLEANUP_END
 }
 /*[pt_close_master]*/
 bool pt_close_master(PTINFO *p)
 {
-	ec_neg1( close(p->pt_fd_m) )
+	if (close(p->pt_fd_m) == -1)
+		goto failure;
 	free(p);
 	return true;
 
-EC_CLEANUP_BGN
+failure:
 	return false;
-EC_CLEANUP_END
 }
 /*[pt_close_slave]*/
 bool pt_close_slave(PTINFO *p)
