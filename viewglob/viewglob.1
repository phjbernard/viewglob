.TH VIEWGLOB 1 "12 October 2004"
.SH NAME
viewglob, gviewglob \- display shell expansion and globbing dynamically
.SH SYNOPSIS
.B viewglob
.RI [ options ]
.br
.B gviewglob
.RI [ options ]

.SH DESCRIPTION
\fIviewglob\fP is a utility which supervises your shell activity and tracks file selections and globs in a display showing the layout of relevant directories.  The display is written in GTK+, so \fIviewglob\fP requires that the shell be run in an X terminal (e.g. \fIxterm\fP, \fIrxvt\fP, etc.).
.PP
\fIviewglob\fP should be compatible with any recent version of \fIbash\fP or \fIzsh\fP, and doesn't assume any particular configuration.
.PP
Note: either name is equivalent for calling the program.

.SH OPTIONS
This program follows the usual GNU command line syntax, with long options starting with two dashes.  A summary is included below.
.TP
.B \-c, \-\-shell\-mode=name
Shell to be used.  \fIname\fP can be "bash" or "zsh" (default is bash).
.TP
.B \-d, \-\-display=path
Use an alternate display program.
.TP
.B \-f, \-\-config\-file=path
Use an alternate config file (\fI~/.viewglobrc\fP is the default).
.TP
.B \-o, \-\-shell\-output=filename
Copy a transcript of the shell's output to the given file.  Note that this keeps the terminal sequences intact, so a cat of the file will be a perfect repeat of the session.  Be careful, the file will grow quickly!
.TP
.B \-O, \-\-term\-output=filename
Output a transcript of the terminal's input to the given file.  This is the stuff that you've typed, without any of the shell interpretation.
.TP
.B \-s, \-\-sort\-style=<windows|ls>
Sort files with dirs first (Windows) or purely by name (ls).  ls mode is the default.
.TP
.B \-r, \-\-dir\-order=<descending|ascending|ascending\-pwd\-first>
List directories in descending order (the default), ascending (last referenced directory has the top listing), or ascending with the current directory always first.
.TP
.B \-n, \-\-show\-max=number
Maximum number of files to show in the display for each directory.  A [Results Truncated] indicator will show if the max has been reached.  Note that you can always force show all files with the context menu.  If \-\-show\-max is passed 0, there is no limit.
.TP
.B \-b, \-\-disable\-icons
Don't show file type icons in the display.
.TP
.B \-t, \-\-disable\-star
Disable the asterisk icon at the beginning of your shell prompt when in a viewglob\-supervised shell.
.TP
.B \-m, \-\-disable\-smart\-insert
File and directory names from the display are always inserted to the terminal escaped and without space padding.
.TP
.B \-w, \-\-show\-hidden
Never hide hidden files (ha).
.TP
.B \-e, \-\-executable=path
Use the given executable as the shell instead of its first reference in the path.  Note that if this isn't a version of the shell chosen with \-\-shell\-mode, it won't do you much good, and could be harmful.
.TP
.B \-h, \-\-help
Show summary of options.
.TP
.B \-V, \-\-version
Show the version of the program.

.SH USAGE
When you start viewglob, you'll be presented with your familiar prompt and a new window showing the file layout of the current directory.  As you begin to type a command, the display window will highlight to show potential filename completions (dull highlight) and file selections and globs/expansions (vibrant highlight).  Also, as you reference other directories (e.g. \fI../\fP or \fI/usr/local/\fP), their layouts will appear as well.
.PP
At the bottom of the display window is a textbox with your command line.  This is what viewglob is actually globbing on; if you find the display is not showing what you expected, check to make sure the display's command line is the same as the one in the shell, as they can be different (see \fBNOTES\fP below).
.PP
With a few exceptions, any text you type into the display is passed to the terminal as input.  So if you wished, you could use the display as your interface to the shell \-\- this actually works quite well if you're doing a lot of file management.  Arrow keys, Page Up, Page Down, Home, and End are interpreted by the display and not passed to the terminal.
.PP
\fBNavigation\fP
.RS 4
You can navigate the display from the terminal by pressing C\-g (Ctrl\-G) followed by a direction character.  They are:
.LP
.RS
.PD 0
.TP 16n
Up:
k, p, or <Up Arrow>
.TP
Down:
j, n, or <Down Arrow>
.TP
Page Up:
b, u, or <PgUp>
.TP
Page Down:
f, d, or <PgDown>
.TP
Toggle on/off:
<SPACE>
.PD
.RE
.LP
Their C\- counterparts also work.  To enter a real C\-g to the shell, type it twice.  If the display is closed through the window manager (e.g. you clicked the little "x" icon), it's only been toggled off.  To get it back, type C\-g <SPACE> in the terminal.
.LP
To disable viewglob functionality (i.e. close the display and stop tracking the command line, etc.), you can type C\-g q.  Once viewglob has been disabled in this manner, it can't be re\-enabled without exiting.
.RE
.PP
\fBFile/Directory Name Insertion\fP
.RS 4
The name of any file or directory can be passed to the terminal by double left\-clicking.  If shift is held, the full path of the file or directory is passed.  By default viewglob is in "\fIsmart\-insert\fP" mode, which means it inserts the names or paths the way it thinks you want to (but may be wrong sometimes \-\- it's "smart" as defined by Microsoft).  \fISmart\-insert\fP works as follows:
.LP
.RS 4
If you are currently at the command line (i.e. the shell has control of the terminal):
.PD 0
.TP 2
-
Special characters (*, ?, !, etc.) are escaped.
.TP
-
If there is no whitespace to the left of the cursor, a space is prepended to the inserted text.
.TP
-
If there is no whitespace to the right of the cursor, a space is appended to the inserted text.
.PD
.RE
.LP
.RS 4
If you are executing another program in the terminal (say a text editor or something):
.PD 0
.TP 2
-
The text is inserted as\-is, without any escaping or spacing.
.PD
.RE
.LP
If \fIsmart\-insert\fP has been disabled with the \-\-disable\-smart\-insert flag, the file/directory names/paths are always inserted escaped but without spacing.
.LP
Note that insertion of file names works pretty much the same as just pasting text into the terminal \-\- it's interpreted only as a series of keystrokes.  This means it's your responsibility to be sure that the shell is in a state cooperative to the reception of text.  For example, if you use vi\-mode in your shell, and you insert a file name while you're in command mode, the shell will receive the data as a series of commands \- probably not what you wanted to do.
.RE
.PP
\fBDisplay Peculiarities\fP
.RS 4
If the number of files in a shown directory is above the given max, viewglob will truncate the results (with an indicator).  You can force viewglob to display the contents of the whole directory by right\-clicking the heading for the listing and choosing "Show all files".  By default hidden files are not shown, but you can view them using the same mechanism.
.LP
Directories referenced in several different ways will always be interpreted as the same directory if they're on the same device and have the same inode (i.e. they are indeed the same).  Therefore these three names are equivalent to viewglob (and a trailing slash does not differentiate a directory from one without a trailing slash):
.IP
/usr/local/lib/
.br
/usr/local/lib/./
.br
/usr/local/lib/../lib/
.LP
Note however that the name of the first reference will be the name that appears in the viewglob display.  So if you refer to files in /usr/local/../local/lib and then /usr/local/lib on the same command line, viewglob understands they are the same directory, but will use the less practical name /usr/local/../local/lib, since it appears first (and is just as valid as /usr/local/lib)
.LP
Since people generally don't type such things as /usr/local/../local/lib, this shouldn't be an issue.
.RE

.SH FILES
.I ~/.viewglobrc
.IP
If present, this file specifies a default configuration for viewglob.  The file syntax is:
.IP
<\fIlong_option_name\fP> [ <\fIwhitespace\fP> <\fIvalue\fP> ]
.IP
So, to always use zsh, disable the asterisk at the prompt, use a display limit of 700, show hidden files, and use Windows\-style sorting, the file should contain:
.IP
.RS
.PD 0
.TP 15n
shell\-mode
zsh
.TP
disable\-star
.TP
show\-max
700
.TP
show\-hidden
.TP
sort\-style
windows
.PD
.RE
.IP
The configuration file has a lower priority than options specified on the command line, and can be disregarded completely with \-f.

.SH NOTES
First of all, when I say below "such\-and\-such feature of bash/zsh doesn't work in viewglob", I just mean that the viewglob display will not show expansion information for that feature.  The functionality of both shells is UNCHANGED by running viewglob.  Anyhow.
.PP
Unfortunately, I haven't found a good way to predict history expansion (stuff involving the special char "!").  The viewglob display will pretend any construction starting with an unescaped ! does not exist.  Exceptions: a ! by itself, or the !(foo) pattern match.
.PP
A viewglob'd shell session will not extend to subshells.  That is, if while in a viewglob session you run, say, "\fIbash\fP" or "\fIsu\fP", viewglob will probably be temporarily disabled until you exit the new shell.  This is a consequence of viewglob's implementation, but I'd probably keep this behaviour even if I could get around it.
.PP
Since viewglob doesn't track changes in shell variables, I've decided to take out variable interpretation entirely.  If viewglob sees what it thinks is a variable in its command line, it'll stop processing it until it's removed.  The variables will of course work fine in the shell itself.
.PP
While running viewglob, don't unset or change the following variables and functions.
.IP
In bash: \fIPS1\fP, \fIPROMPT_COMMAND\fP, \fIhistchars\fP;
.br
In zsh:  \fIPROMPT\fP (or \fIPS1\fP), \fIRPROMPT\fP, \fIprecmd\fP, \fITRAPHUP\fP;
.PP
viewglob would probably become confused.  Note that if you do change one of these (maybe you were curious, or you just forgot), it won't affect the shell you were using, just the display.
.br
If you want to modify these variables, do so outside of a viewglob session, or put your changes in the shell's run control file.
.PP
Only the first command in a compound command will be interpreted by viewglob.  For example, as you type:
.IP
$ mv *.jp{e,}g ~/photos/ && rm *
.PP
viewglob will stop listening when it sees "&&", and the display will only register *.jp{e,}g.  This isn't an implementation problem \- it's just that showing globbing for the subsequent commands could be deceptive, as the filesystem could be changed by executing the first command (as it is in this case).
.PP
Command substitution (stuff with backticks (`) or $(command)) is ignored by viewglob for the reason given above.  Works fine in your shell though.
.PP
The display will not interpret aliases in zsh.

For more information, please visit:
.IP
\fIhttp://viewglob.sourceforge.net/\fP

.SH "ENVIRONMENT VARIABLES"
.TP
.SM HOME
The location of the default configuration file.
.SH BUGS
.PP
Command line tracking seems to be pretty good for general use, but is far from perfect.
.PP
Resizing the terminal window after you've typed a multi\-line command will often cause viewglob's command line to become temporarily out of sync with the true command line, though it tries really hard to keep up.  No big deal if this happens \-\- viewglob should be in sync by the start of the next command.
.PP
Ctrl\-C does not work in terminals under FreeBSD.  I've spent a lot of time on this issue to no avail \-\- any terminal I/O savvy BSD users have some insight?
.PP
And there are certainly others.  If you spot any bugs (and they aren't explained by \fBNOTES\fP above), send me a message, okay?  Ideas and code contributions are also very welcome.
.SH AUTHORS
Stephen Bach <sjbach@users.sourceforge.net>
.SH SEE ALSO
.BR bash (1),
.BR zsh (1),
.BR ls (1),
.BR glob (7).
